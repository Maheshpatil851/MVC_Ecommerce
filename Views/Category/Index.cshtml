@model IEnumerable<MVC_Project.Models.Category>

@{
    ViewData["Title"] = "Categories";
}

<h1>Categories</h1>

<p class="text-end">
    <a asp-action="Create" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
            <path d="M8 0a.5.5 0 0 1 .5.5v7.5h7.5a.5.5 0 0 1 0 1H8.5v7.5a.5.5 0 0 1-1 0V9H.5a.5.5 0 0 1 0-1H7.5V.5A.5.5 0 0 1 8 0z" />
        </svg>
        Create New
    </a>
</p>

<div class="container mt-3">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="recordsPerPage" class="form-label">Records per page:</label>
            <select id="recordsPerPage" class="form-select" onchange="changeRecordsPerPage()">
                <option value="2" selected>2</option>
                <option value="5">5</option>
                <option value="8">8</option>
                <option value="10">10</option>
            </select>
        </div>
    </div>
    <table class="table table-bordered table-striped table-hover table-sm table-responsive">
        <thead class="table-primary">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Name)</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th>
                <th>@Html.DisplayNameFor(model => model.IsActive)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="table-light">
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                    <td>@Html.DisplayFor(modelItem => item.IsActive)</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.CategoryId" class="btn btn-sm btn-warning">Edit</a> |
                        <button class="btn btn-sm btn-danger" data-modal-type="category" onclick="openDeleteModal(@item.CategoryId, '@item.Name')">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center">
        <div>
            <a href="#" class="btn btn-secondary" id="firstPage" onclick="goToPage(1)">First</a>
            <a href="#" class="btn btn-secondary" id="previousPage" onclick="goToPage(currentPage - 1)">Previous</a>
        </div>
        <div>
            <span id="pageInfo">Page <span id="currentPage">1</span> of <span id="totalPages">1</span></span>
        </div>
        <div>
            <a href="#" class="btn btn-secondary" id="nextPage" onclick="goToPage(currentPage + 1)">Next</a>
            <a href="#" class="btn btn-secondary" id="lastPage" onclick="goToPage(totalPages)">Last</a>
        </div>
    </div>
</div>

@Html.Partial("_DeleteProductModal");

<script>
    function openDeleteModal(productId, productName) {
        console.log("called");
        $('#productName').text(productName);
        $('#confirmDeleteButton').data('id', productId);
        $('#confirmDeleteButton').data('modal-type', 'category');
        $('#deleteModal').modal('show');
    }

    let currentPage = 1;
    let totalPages = 1;
    let recordsPerPage = 2;

    function updatePageInfo() {
        document.getElementById('currentPage').innerText = currentPage;
        document.getElementById('totalPages').innerText = totalPages;
    }

    function goToPage(pageNumber) {
        if (true) {
            currentPage = pageNumber;
            loadPageData();
            updatePageInfo();
        }
    }

    function changeRecordsPerPage() {
        recordsPerPage = parseInt(document.getElementById('recordsPerPage').value);
        currentPage = 1;
        loadPageData();
    }

    function loadPageData() {
        $.ajax({
            url: '@Url.Action("Index", "Category")',
            type: 'GET',
            data: {
                PageNumber: currentPage,
                PageSize: recordsPerPage,
                SkipPagination: false,
            },
            success: function (data) {
                updateTable(data.categories);
                totalPages = data.totalPages;
                updatePageInfo();
                updatePaginationButtons();
            }
        });
    }

    function updateTable(categories) {
        if (!Array.isArray(categories)) {
            return;  
        }
        let tableBody = $('tbody');
        tableBody.empty();

        categories.forEach(category => {
            let row = `<tr>
                    <td>${category.name}</td>
                    <td>${category.description}</td>
                    <td>${category.isActive}</td>
                    <td>
                        <a href="/Category/Edit/${category.categoryId}" class="btn btn-sm btn-warning">Edit</a> |
                        <a href="/Category/Details/${category.categoryId}" class="btn btn-sm btn-info">Details</a> |
                        <a href="/Category/Delete/${category.categoryId}" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>`;
            tableBody.append(row);
        });
    }

    function updatePaginationButtons() {
        $('#previousPage').prop('disabled', currentPage === 1);
        $('#nextPage').prop('disabled', currentPage === totalPages);
        $('#firstPage').prop('disabled', currentPage === 1);
        $('#lastPage').prop('disabled', currentPage === totalPages);
    }

    loadPageData();
</script>
