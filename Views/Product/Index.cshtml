@model IEnumerable<MVC_Project.Models.Product>

@{
    ViewData["Title"] = " Nursery Products";
}

<h1>Nursery Products</h1>

<p class="text-end">
    <a asp-action="Create" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
            <path d="M8 0a.5.5 0 0 1 .5.5v7.5h7.5a.5.5 0 0 1 0 1H8.5v7.5a.5.5 0 0 1-1 0V9H.5a.5.5 0 0 1 0-1H7.5V.5A.5.5 0 0 1 8 0z" />
        </svg>
        Create New
    </a>
</p>

<div class="container mt-3">
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="recordsPerPage" class="form-label">Records per page:</label>
                <select id="recordsPerPage" class="form-select" onchange="changeRecordsPerPage()">
                    <option value="2" selected>2</option>
                    <option value="5">5</option>
                    <option value="8">8</option>
                    <option value="10">10</option>
                </select>
            </div>
        </div>
    <table class="table table-bordered table-striped table-hover table-sm table-responsive">
        <thead class="table-primary">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Name)</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th>
                <th>@Html.DisplayNameFor(model => model.Price)</th>
                <th>@Html.DisplayNameFor(model => model.DiscountPrice)</th>
                <th>@Html.DisplayNameFor(model => model.StockQuantity)</th>
                <th>@Html.DisplayNameFor(model => model.ImageUrl)</th>
                <th>@Html.DisplayNameFor(model => model.CreatedAt)</th>
                <th>@Html.DisplayNameFor(model => model.ModifiedAt)</th>
                <th>@Html.DisplayNameFor(model => model.IsActive)</th>
                <th>@Html.DisplayNameFor(model => model.Category)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="table-light">
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Description)</td>
                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                    <td>@Html.DisplayFor(modelItem => item.DiscountPrice)</td>
                    <td>@Html.DisplayFor(modelItem => item.StockQuantity)</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="Product Image" class="img-fluid" style="max-width: 100px; height: auto;" />
                        }
                        else
                        {
                            <span>No image available</span>
                        }
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.CreatedAt)</td>
                    <td>@Html.DisplayFor(modelItem => item.ModifiedAt)</td>
                    <td>@Html.DisplayFor(modelItem => item.IsActive)</td>
                    <td>@Html.DisplayFor(modelItem => item.Category.CategoryId)</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ProductId" class="btn btn-sm btn-warning">Edit</a> |
                        <button class="btn btn-sm btn-danger"  onclick="openDeleteModal(@item.ProductId, '@item.Name')">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    <div class="d-flex justify-content-between align-items-center">
        <div>
            <a href="#" class="btn btn-secondary" id="firstPage" onclick="goToPage(1)">First</a>
            <a href="#" class="btn btn-secondary" id="previousPage" onclick="goToPage(currentPage - 1)">Previous</a>
        </div>
        <div>
            <span id="pageInfo">Page <span id="currentPage">1</span> of <span id="totalPages">1</span></span>
        </div>
        <div>
            <a href="#" class="btn btn-secondary" id="nextPage" onclick="goToPage(currentPage + 1)">Next</a>
            <a href="#" class="btn btn-secondary" id="lastPage" onclick="goToPage(totalPages)">Last</a>
        </div>
    </div>
</div>
@Html.Partial("_DeleteProductModal");



<script>
    function openDeleteModal(productId, productName) {
        console.log("called");
        $('#productName').text(productName);  
        $('#confirmDeleteButton').data('id', productId); 
        $('#confirmDeleteButton').data('modal-type', 'product');
        $('#deleteModal').modal('show');  
    }

    let currentPage = 1;
    let totalPages = 2;
    let recordsPerPage = 5;

    function updatePageInfo() {
        document.getElementById('currentPage').innerText = currentPage;
        document.getElementById('totalPages').innerText = totalPages;
    }

    function goToPage(pageNumber) {
        console.log("pagenumebr", pageNumber);
        console.log("totalPages", totalPages);
        if (pageNumber >= 1 && pageNumber <= totalPages) {
            console.log("inside if pagenumebr", pageNumber);

            currentPage = pageNumber;
            loadPageData();
            updatePageInfo();
        }
    }

    function changeRecordsPerPage() {
        recordsPerPage = parseInt(document.getElementById('recordsPerPage').value);
        currentPage = 1;
        loadPageData();
    }

    function loadPageData() {
        console.log("loadPageData");
        $.ajax({
            url: '@Url.Action("Index", "Product")',
            type: 'GET',
            data: {
                PageNumber: currentPage,
                PageSize: recordsPerPage,
                SkipPagination: false,  
            },
            success: function (data) {
                console.log(data);
                updateTable(data.products);
                totalPages = data.totalPages; 
                updatePageInfo(); 
                updatePaginationButtons(); 
            }
        });
    }


    function updateTable(products) {
        let tableBody = $('tbody');
        tableBody.empty();

        products.forEach(product => {
            let row = `<tr>
                    <td>${product.name}</td>
                    <td>${product.description}</td>
                    <td>${product.price}</td>
                    <td>${product.discountPrice}</td>
                    <td>${product.stockQuantity}</td>
                    <td><img src="${product.imageUrl}" alt="Product Image" class="img-fluid" style="max-width: 100px; height: auto;" /></td>
                    <td>${product.createdAt}</td>
                    <td>${product.modifiedAt}</td>
                    <td>${product.isActive}</td>
                    <td>${product.categoryId}</td>
                    <td>
                        <a href="/Controller/Edit/${product.productId}" class="btn btn-sm btn-warning">Edit</a> |
                        <button class="btn btn-sm btn-danger" onclick="openDeleteModal(${product.productId}, '${product.name}')">Delete</button>
                    </td>
                </tr>`;
            tableBody.append(row);
        });
    }

    function updatePaginationButtons() {
        $('#previousPage').prop('disabled', currentPage === 1);
        $('#nextPage').prop('disabled', currentPage === totalPages);
        $('#firstPage').prop('disabled', currentPage === 1);
        $('#lastPage').prop('disabled', currentPage === totalPages);
    }

    loadPageData();
</script>


